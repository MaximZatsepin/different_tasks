'''
Римские цифры представлены семью различными символами:  I, V, X, L, C, D, M.

       Значение символа
я 1
В 5
х 10
л 50
С 100
Д 500
М 1000
Например,  2пишется как II римская цифра, просто складывая две единицы. 12пишется как  XII, что просто X + II. Число 27записывается как XXVII, то есть XX + V + II.

Римские цифры обычно пишутся от большей к меньшей слева направо. Однако цифра «четыре» не является цифрой «четыре» IIII. Вместо этого число четыре записывается как IV. Поскольку единица стоит перед пятеркой, мы вычитаем ее, получая четыре. Тот же принцип применим и к числу девять, которое записывается как IX. Есть шесть случаев, когда используется вычитание:

Iможно поставить перед V(5) и X(10), чтобы получилось 4 и 9. 
Xможно поставить перед L(50) и C(100), чтобы получилось 40 и 90. 
Cможно поставить перед D(500) и M(1000), чтобы получить 400 и 900.
Дана римская цифра, преобразуйте ее в целое число.

 

Пример 1:

Ввод: s = «III»
 Выход: 3
 Объяснение: III = 3.
Пример 2:

Ввод: s = «LVIII»
 Выход: 58
 Объяснение: L = 50, V = 5, III = 3.
Пример 3:

Ввод: s = "MCMXCIV"
 Вывод: 1994 г.
 Объяснение: M = 1000, CM = 900, XC = 90 и IV = 4.
 

Ограничения:

1 <= s.length <= 15
sсодержит только символы ('I', 'V', 'X', 'L', 'C', 'D', 'M').
Гарантируется ,  что sэто допустимая римская цифра в диапазоне [1, 3999].
'''



s = "MCMXCIV"

dict_of_numbers = { 'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}
res = 0 
i = 0
while i < len(s) - 1:
    if dict_of_numbers[s[i]] < dict_of_numbers[s[i+1]]:
        res += (dict_of_numbers[s[i+1]] - dict_of_numbers[s[i]])
        i += 2
    else:
        res += dict_of_numbers[s[i]]
        i += 1 
if i == len(s)-1:
    res += dict_of_numbers[s[i]]

print(res)




# Leetcode

class Solution:
    def romanToInt(self, s: str) -> int:
        dict_of_numbers = { 'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}
        res = 0 
        i = 0
        while i < len(s) - 1:
            if dict_of_numbers[s[i]] < dict_of_numbers[s[i+1]]:
                res += (dict_of_numbers[s[i+1]] - dict_of_numbers[s[i]])
                i += 2
            else:
                res += dict_of_numbers[s[i]]
                i += 1 
        if i == len(s)-1:
            res += dict_of_numbers[s[i]]
        return res
